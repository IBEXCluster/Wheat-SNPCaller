#!/bin/bash
#SBATCH --nodes=1
#SBATCH --array=1-10155
#SBATCH --output=logs/Downstream-%A.%a.err
#SBATCH --error=logs/Downstream-%A.%a.err
#SBATCH --time=20:00:00 
#SBATCH --partition=batch
#SBATCH --job-name=downstream-test
#SBATCH --cpus-per-task=1
#SBATCH --mem=75GB
##SBATCH -A ibex-cs
#run the application:

module load gatk/4.1.8.0

## Variables
export REF=/ibex/scratch/projects/c2023/einkorn/Resequencing/Ref_validated/TA299_v1.0.fasta
export OUTPUT=/ibex/scratch/projects/c2023/einkorn/Resequencing/TA299_OUT
export MYTMP=${OUTPUT}/tmp_${SLURM_ARRAY_TASK_ID};
export gVCF=${OUTPUT}/gVCF;
export SNPs=${OUTPUT}/SNPs;
export INDELs=${OUTPUT}/INDELs;
#export SNPs2=${OUTPUT}/SNPs2
#export SNPs3=${OUTPUT}/SNPs3
mkdir -p $MYTMP;
mkdir -p $gVCF;
mkdir -p $SNPs;
mkdir -p $INDELs;
#mkdir -p $SNPs2;
#mkdir -p $SNPs3;


## Array Index based job distribution 
LINE=${SLURM_ARRAY_TASK_ID};

## Read one Split value Per Rank 
ChrName=`sed -n ${LINE}p split.txt | awk '{print $1}'`
size=`sed -n ${LINE}p split.txt | awk '{print $2}'`
Start=`sed -n ${LINE}p split.txt | awk '{print $3}'`
End=`sed -n ${LINE}p split.txt | awk '{print $4}'`
INPUT=`cat Phase3.input.list`

JAVAMEM=$(( ($SLURM_MEM_PER_NODE / 1024) *80/100 ))
JAVAMEM+="g"

## Step 1
echo " -----Step1, GATK: GenomicsDBImport --------------"
time -p gatk --java-options "-Xmx$JAVAMEM -Xms$JAVAMEM" GenomicsDBImport -V $INPUT --overwrite-existing-genomicsdb-workspace --genomicsdb-workspace-path ${gVCF}/$ChrName.$size --batch-size 45 --intervals $ChrName:$Start-$End --tmp-dir $MYTMP;

## Step 2
#echo " ----- Step 2, GATK: GenotypeGVCFs -----------"
time -p gatk --java-options "-Xmx$JAVAMEM -Xms$JAVAMEM" GenotypeGVCFs --variant gendb://$gVCF/$ChrName.$size --reference $REF --intervals $ChrName:$Start-$End --output $gVCF/Genotype.$ChrName.$size.vcf --tmp-dir $MYTMP;
## Step 3
echo " ----- Step 3, GATK: SelectVariants (SNPs) -----------"
time -p gatk --java-options "-Xmx$JAVAMEM -Xms$JAVAMEM" SelectVariants --variant $gVCF/Genotype.$ChrName.$size.vcf --reference $REF -select-type SNP --output $SNPs/$ChrName.$size.vcf --tmp-dir $MYTMP;
## Step 4
echo " ----- Step 4, GATK: VariantFiltration (SNPs) --------"
time -p gatk --java-options "-Xmx$JAVAMEM -Xms$JAVAMEM" VariantFiltration --variant $SNPs/$ChrName.$size.vcf --reference $REF --filter-expression "QD < 2.0 || FS > 60.0 || MQ < 40.00 || MQRankSum < -12.5 || ReadPosRankSum < -8.0 || SOR > 3.0" --filter-name snp_filter --output $SNPs/filtered_snps.$ChrName.$size.vcf --tmp-dir $MYTMP;
## Step 5
echo " ----- Step 5, GATK: SelectVariants (INDELs) -----------"
time -p gatk --java-options "-Xmx$JAVAMEM -Xms$JAVAMEM" SelectVariants --variant $gVCF/Genotype.$ChrName.$size.vcf --reference $REF -select-type INDEL --output $INDELs/$ChrName.$size.vcf --tmp-dir $MYTMP;
## Step 6:
echo " ----- Step 6, GATK: VariantFiltration (INDELs) --------"
time -p gatk --java-options "-Xmx$JAVAMEM -Xms$JAVAMEM" VariantFiltration --variant $INDELs/$ChrName.$size.vcf --reference $REF --filter-expression "QD < 2.0 || FS > 200.0 || ReadPosRankSum < -20.0 || SOR > 10.0" --filter-name indel_filter --output $INDELs/filtered_indels.$ChrName.$size.vcf --tmp-dir $MYTMP;

## Step 7:
#echo " ----- Step 7, vcftools: remove  --------"
#time -p vcftools --vcf $SNPs/filtered_snps.$ChrName.$size.vcf --remove-filtered-all --recode --recode-INFO-all --out $SNPs2/removed_tag_filtered_snps.$ChrName.$size
## Step 8:
#echo " ----- Step 8, GATK VariantFilteration remove clusters  --------"
#time -p gatk --java-options "-Xmx$JAVAMEM -Xms$JAVAMEM" VariantFiltration --variant $SNPs2/removed_tag_filtered_snps.$ChrName.${size}.recode.vcf --reference $REF --cluster-size 3 --cluster-window-size 10 -output $SNPs3/
